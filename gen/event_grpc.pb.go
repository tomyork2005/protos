// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: event.proto

package event

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WSRouter_Publish_FullMethodName = "/event.WSRouter/Publish"
)

// WSRouterClient is the client API for WSRouter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WSRouterClient interface {
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error)
}

type wSRouterClient struct {
	cc grpc.ClientConnInterface
}

func NewWSRouterClient(cc grpc.ClientConnInterface) WSRouterClient {
	return &wSRouterClient{cc}
}

func (c *wSRouterClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, WSRouter_Publish_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WSRouterServer is the server API for WSRouter service.
// All implementations must embed UnimplementedWSRouterServer
// for forward compatibility.
type WSRouterServer interface {
	Publish(context.Context, *PublishRequest) (*PublishResponse, error)
	mustEmbedUnimplementedWSRouterServer()
}

// UnimplementedWSRouterServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWSRouterServer struct{}

func (UnimplementedWSRouterServer) Publish(context.Context, *PublishRequest) (*PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedWSRouterServer) mustEmbedUnimplementedWSRouterServer() {}
func (UnimplementedWSRouterServer) testEmbeddedByValue()                  {}

// UnsafeWSRouterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WSRouterServer will
// result in compilation errors.
type UnsafeWSRouterServer interface {
	mustEmbedUnimplementedWSRouterServer()
}

func RegisterWSRouterServer(s grpc.ServiceRegistrar, srv WSRouterServer) {
	// If the following call pancis, it indicates UnimplementedWSRouterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WSRouter_ServiceDesc, srv)
}

func _WSRouter_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WSRouterServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WSRouter_Publish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WSRouterServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WSRouter_ServiceDesc is the grpc.ServiceDesc for WSRouter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WSRouter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "event.WSRouter",
	HandlerType: (*WSRouterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _WSRouter_Publish_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "event.proto",
}

const (
	WSRouterClient_GetEventFromWsRouter_FullMethodName = "/event.WSRouterClient/GetEventFromWsRouter"
)

// WSRouterClientClient is the client API for WSRouterClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WSRouterClientClient interface {
	GetEventFromWsRouter(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
}

type wSRouterClientClient struct {
	cc grpc.ClientConnInterface
}

func NewWSRouterClientClient(cc grpc.ClientConnInterface) WSRouterClientClient {
	return &wSRouterClientClient{cc}
}

func (c *wSRouterClientClient) GetEventFromWsRouter(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, WSRouterClient_GetEventFromWsRouter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WSRouterClientServer is the server API for WSRouterClient service.
// All implementations must embed UnimplementedWSRouterClientServer
// for forward compatibility.
type WSRouterClientServer interface {
	GetEventFromWsRouter(context.Context, *GetRequest) (*GetResponse, error)
	mustEmbedUnimplementedWSRouterClientServer()
}

// UnimplementedWSRouterClientServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWSRouterClientServer struct{}

func (UnimplementedWSRouterClientServer) GetEventFromWsRouter(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventFromWsRouter not implemented")
}
func (UnimplementedWSRouterClientServer) mustEmbedUnimplementedWSRouterClientServer() {}
func (UnimplementedWSRouterClientServer) testEmbeddedByValue()                        {}

// UnsafeWSRouterClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WSRouterClientServer will
// result in compilation errors.
type UnsafeWSRouterClientServer interface {
	mustEmbedUnimplementedWSRouterClientServer()
}

func RegisterWSRouterClientServer(s grpc.ServiceRegistrar, srv WSRouterClientServer) {
	// If the following call pancis, it indicates UnimplementedWSRouterClientServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WSRouterClient_ServiceDesc, srv)
}

func _WSRouterClient_GetEventFromWsRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WSRouterClientServer).GetEventFromWsRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WSRouterClient_GetEventFromWsRouter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WSRouterClientServer).GetEventFromWsRouter(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WSRouterClient_ServiceDesc is the grpc.ServiceDesc for WSRouterClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WSRouterClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "event.WSRouterClient",
	HandlerType: (*WSRouterClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEventFromWsRouter",
			Handler:    _WSRouterClient_GetEventFromWsRouter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "event.proto",
}
