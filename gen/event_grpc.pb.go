// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: event.proto

package event

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WSRouter_PublishMessageToWs_FullMethodName = "/protobuf.wsRouter.WSRouter/PublishMessageToWs"
)

// WSRouterClient is the client API for WSRouter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// These are the ws-router methods that it provides to other microservices that use it to publish their messages via ws.
type WSRouterClient interface {
	PublishMessageToWs(ctx context.Context, in *PublishMessageToWsRequest, opts ...grpc.CallOption) (*PublishMessageToWsResponse, error)
}

type wSRouterClient struct {
	cc grpc.ClientConnInterface
}

func NewWSRouterClient(cc grpc.ClientConnInterface) WSRouterClient {
	return &wSRouterClient{cc}
}

func (c *wSRouterClient) PublishMessageToWs(ctx context.Context, in *PublishMessageToWsRequest, opts ...grpc.CallOption) (*PublishMessageToWsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishMessageToWsResponse)
	err := c.cc.Invoke(ctx, WSRouter_PublishMessageToWs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WSRouterServer is the server API for WSRouter service.
// All implementations must embed UnimplementedWSRouterServer
// for forward compatibility.
//
// These are the ws-router methods that it provides to other microservices that use it to publish their messages via ws.
type WSRouterServer interface {
	PublishMessageToWs(context.Context, *PublishMessageToWsRequest) (*PublishMessageToWsResponse, error)
	mustEmbedUnimplementedWSRouterServer()
}

// UnimplementedWSRouterServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWSRouterServer struct{}

func (UnimplementedWSRouterServer) PublishMessageToWs(context.Context, *PublishMessageToWsRequest) (*PublishMessageToWsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishMessageToWs not implemented")
}
func (UnimplementedWSRouterServer) mustEmbedUnimplementedWSRouterServer() {}
func (UnimplementedWSRouterServer) testEmbeddedByValue()                  {}

// UnsafeWSRouterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WSRouterServer will
// result in compilation errors.
type UnsafeWSRouterServer interface {
	mustEmbedUnimplementedWSRouterServer()
}

func RegisterWSRouterServer(s grpc.ServiceRegistrar, srv WSRouterServer) {
	// If the following call pancis, it indicates UnimplementedWSRouterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WSRouter_ServiceDesc, srv)
}

func _WSRouter_PublishMessageToWs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishMessageToWsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WSRouterServer).PublishMessageToWs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WSRouter_PublishMessageToWs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WSRouterServer).PublishMessageToWs(ctx, req.(*PublishMessageToWsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WSRouter_ServiceDesc is the grpc.ServiceDesc for WSRouter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WSRouter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.wsRouter.WSRouter",
	HandlerType: (*WSRouterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishMessageToWs",
			Handler:    _WSRouter_PublishMessageToWs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "event.proto",
}

const (
	Clients_PublishEvents_FullMethodName = "/protobuf.wsRouter.Clients/PublishEvents"
)

// ClientsClient is the client API for Clients service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// These are the methods that a microservice should have in order for it to be considered a ws-router client.
type ClientsClient interface {
	PublishEvents(ctx context.Context, in *PublishEventsRequest, opts ...grpc.CallOption) (*PublishEventsResponse, error)
}

type clientsClient struct {
	cc grpc.ClientConnInterface
}

func NewClientsClient(cc grpc.ClientConnInterface) ClientsClient {
	return &clientsClient{cc}
}

func (c *clientsClient) PublishEvents(ctx context.Context, in *PublishEventsRequest, opts ...grpc.CallOption) (*PublishEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishEventsResponse)
	err := c.cc.Invoke(ctx, Clients_PublishEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientsServer is the server API for Clients service.
// All implementations must embed UnimplementedClientsServer
// for forward compatibility.
//
// These are the methods that a microservice should have in order for it to be considered a ws-router client.
type ClientsServer interface {
	PublishEvents(context.Context, *PublishEventsRequest) (*PublishEventsResponse, error)
	mustEmbedUnimplementedClientsServer()
}

// UnimplementedClientsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedClientsServer struct{}

func (UnimplementedClientsServer) PublishEvents(context.Context, *PublishEventsRequest) (*PublishEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishEvents not implemented")
}
func (UnimplementedClientsServer) mustEmbedUnimplementedClientsServer() {}
func (UnimplementedClientsServer) testEmbeddedByValue()                 {}

// UnsafeClientsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientsServer will
// result in compilation errors.
type UnsafeClientsServer interface {
	mustEmbedUnimplementedClientsServer()
}

func RegisterClientsServer(s grpc.ServiceRegistrar, srv ClientsServer) {
	// If the following call pancis, it indicates UnimplementedClientsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Clients_ServiceDesc, srv)
}

func _Clients_PublishEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServer).PublishEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Clients_PublishEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServer).PublishEvents(ctx, req.(*PublishEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Clients_ServiceDesc is the grpc.ServiceDesc for Clients service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Clients_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.wsRouter.Clients",
	HandlerType: (*ClientsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishEvents",
			Handler:    _Clients_PublishEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "event.proto",
}
